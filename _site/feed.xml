<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-07T12:24:25+08:00</updated><id>http://localhost:4000/</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2018/01/07/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-01-07T10:47:29+08:00</published><updated>2018-01-07T10:47:29+08:00</updated><id>http://localhost:4000/jekyll/update/2018/01/07/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/01/07/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">python examples of Google maps api</title><link href="http://localhost:4000/2017/05/10/python-example-of-google-maps-api-2.html" rel="alternate" type="text/html" title="python examples of Google maps api" /><published>2017-05-10T10:17:21+08:00</published><updated>2017-05-10T10:17:21+08:00</updated><id>http://localhost:4000/2017/05/10/python-example-of-google-maps-api-2</id><content type="html" xml:base="http://localhost:4000/2017/05/10/python-example-of-google-maps-api-2.html">&lt;p&gt;Last week, Sheena shouted at me that I just stand to see her suffering from apartment searching. I actually do not have any idea how to find an apartment oversea, more even I haven’t gone abroad. It’s a really tricky task.
The succeeding days, I will post several articles about how I build a bot to find a suitable apartment nearby specify university.
First thing.
Since I get an address of an apartment, how could I know the time it takes to the campus.
Use apps, such as Google Maps, do work, but it’s hard to program. Fortunately, Google Maps provides lots of map-relation APIs.&lt;/p&gt;

&lt;p&gt;##Here are some exampls 
&lt;code class=&quot;highlighter-rouge&quot;&gt;def coord_distance(uname, hla
t, hlon, model):
    url = &quot;https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&amp;amp;origins=%s&amp;amp;destinations=%f,%f&amp;amp;mode=%s&amp;amp;key=%s&quot; % (uname, hlat, hlon, model, DIST_KEY)
    googlerowdis = requests_get(url).text
    googledist = json.loads(googlerowdis)
    dura = googledist['rows'][0]['elements'][0]['duration']['value']
    duratext = googledist['rows'][0]['elements'][0]['duration']['text']
    dist = googledist['rows'][0]['elements'][0]['distance']['value']
    disttext = googledist['rows'][0]['elements'][0]['distance']['text']
    return dura, duratext, dist, disttext&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;def getGeocode(uname):
    url = &quot;https://maps.googleapis.com/maps/api/geocode/json?address=%s&amp;amp;key=%s&quot; % (uname, GEOCODE_KEY)
    rowgeo= requests_get(url).text
    geocode= json.loads(rowgeo)
    zipcode = geocode['results'][0]['address_components'][-1]['short_name']
    lat = geocode['results'][0]['geometry']['location']['lat']
    lng = geocode['results'][0]['geometry']['location']['lng']
    placeId= geocode['results'][0]['place_id']
    placeType = geocode['results'][0]['types'][-1]
    geocode={'zipcode':zipcode, 'lat':lat, 'lng':lng, 'placeId':placeId, 'placeType':placeType}
    return geocode&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="api" /><summary type="html">Last week, Sheena shouted at me that I just stand to see her suffering from apartment searching. I actually do not have any idea how to find an apartment oversea, more even I haven’t gone abroad. It’s a really tricky task. The succeeding days, I will post several articles about how I build a bot to find a suitable apartment nearby specify university. First thing. Since I get an address of an apartment, how could I know the time it takes to the campus. Use apps, such as Google Maps, do work, but it’s hard to program. Fortunately, Google Maps provides lots of map-relation APIs.</summary></entry><entry><title type="html">Golang: convert any form of string to int</title><link href="http://localhost:4000/2017/05/09/golang-convert-string-to-binary-representation.html" rel="alternate" type="text/html" title="Golang: convert any form of string  to int" /><published>2017-05-09T03:11:57+08:00</published><updated>2017-05-09T03:11:57+08:00</updated><id>http://localhost:4000/2017/05/09/golang-convert-string-to-binary-representation</id><content type="html" xml:base="http://localhost:4000/2017/05/09/golang-convert-string-to-binary-representation.html">&lt;p&gt;Last week, Supervisor gave me a task that reduces the output of log. Logs are information about millions of devices. Each device has a unique key. Convert key into int, and mod it with a special number, we could filter target device to log.&lt;/p&gt;

&lt;p&gt;mod operation in golang is %. The challenge is convert key. Here are the code to convert any form of string to int.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func stringToInt(s string) int64 {
	var binString string
	for _, c := range s {
		binString = fmt.Sprintf(&quot;%s%b&quot;, binString, c)
	}
	number, _ := strconv.ParseInt(binString, 2, 64)
	return number
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Clike &lt;a href=&quot;https://play.golang.org/p/T9rkTsrc0B&quot;&gt;here&lt;/a&gt; to run a online demo&lt;/p&gt;

&lt;p&gt;Reforence:
http://stackoverflow.com/questions/37349071/golang-how-to-convert-string-to-binary-representation/37350639&lt;/p&gt;</content><author><name></name></author><category term="golang" /><summary type="html">Last week, Supervisor gave me a task that reduces the output of log. Logs are information about millions of devices. Each device has a unique key. Convert key into int, and mod it with a special number, we could filter target device to log.</summary></entry><entry><title type="html">Hot to use proxy in Linux</title><link href="http://localhost:4000/2017/05/08/linux-proxy.html" rel="alternate" type="text/html" title="Hot to use proxy in Linux" /><published>2017-05-08T02:10:04+08:00</published><updated>2017-05-08T02:10:04+08:00</updated><id>http://localhost:4000/2017/05/08/linux-proxy</id><content type="html" xml:base="http://localhost:4000/2017/05/08/linux-proxy.html">&lt;p&gt;Thanks for GFW, coders have to overcome difficulties for some resources. Master the skill of proxy became indispensable. Here are some tips for the Linux user.&lt;/p&gt;

&lt;h2 id=&quot;where-need-proxies&quot;&gt;WHERE NEED PROXIES&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Browser, Chrome/Firefox/Safari etd.&lt;/li&gt;
  &lt;li&gt;Shell, handle http request bypass firewalls&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tools&quot;&gt;TOOLS&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shadowsocks&quot;&gt;shadowsocks&lt;/a&gt;，a fast tunnel proxy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.irif.fr/~jch/software/polipo/&quot;&gt;Polipo&lt;/a&gt;, a caching web proxy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/FelisCatus/SwitchyOmega&quot;&gt;SwitchyOmega&lt;/a&gt;, Manage and switch between multiple proxies quickly &amp;amp; easily.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;tips&quot;&gt;TIPS&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Conver convert socks into an HTTP proxy            &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;polipo socksParentProxy=localhost:PORT daemonise=true&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set proxy for shell            &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;export http_proxy=&quot;http://127.0.0.1:PORT/&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set proxy for git             &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global http.proxy 127.0.0.1:PORT&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use proxy in python             &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;proxies = {
  &quot;http&quot;: cf.get('proxy','http://127.0.0.1:PORT'),
  &quot;https&quot;: cf.get('proxy','https://127.0.0.1:PORT'),
}
requests.get(url, proxies=proxies)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="linux" /><category term="proxy" /><category term="shell" /><category term="tips" /><summary type="html">Thanks for GFW, coders have to overcome difficulties for some resources. Master the skill of proxy became indispensable. Here are some tips for the Linux user.</summary></entry><entry><title type="html">New start</title><link href="http://localhost:4000/2017/05/02/new-start.html" rel="alternate" type="text/html" title="New start" /><published>2017-05-02T10:11:00+08:00</published><updated>2017-05-02T10:11:00+08:00</updated><id>http://localhost:4000/2017/05/02/new-start</id><content type="html" xml:base="http://localhost:4000/2017/05/02/new-start.html">&lt;p&gt;Another try&lt;/p&gt;</content><author><name></name></author><summary type="html">Another try</summary></entry></feed>